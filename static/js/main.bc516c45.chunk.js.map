{"version":3,"sources":["logo.svg","SearchBar.js","Products.js","ShoppingCart.js","components/Jumbotron/index.js","components/Grid/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","useState","inputText","setInputText","console","log","type","value","onChange","e","target","onClick","handleSearch","Products","products","length","getProducts","to","map","product","inCart","cart","some","cartItem","isInCart","src","mediumImage","name","salePrice","productId","longDescription","addToCart","removeFromCart","ShoppingCart","Jumbotron","className","Container","fluid","children","Row","Col","size","split","join","App","useMappedState","valueSetter","query","axios","get","then","data","catch","err","useEffect","newCart","filter","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc516c45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\n\r\n\r\nconst SearchBar = props => {\r\n    const [inputText, setInputText] = useState('');\r\n\r\n    const handleSearch = () => props.handleSearch(inputText);\r\n    console.log(inputText)\r\n    return (<div>\r\n        <input type=\"text\" value={inputText} onChange={e => setInputText(e.target.value)} />\r\n        <button onClick={handleSearch}>Search</button>\r\n    </div>)\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport SearchBar from './SearchBar';\r\n\r\nconst Products = props => {\r\n    console.log(props.products)\r\n    const isInCart = product => props.cart.some(cartItem => cartItem === product);\r\n    return (<div>\r\n        {props.products.length === 0 && <h1>Loading ......</h1>}\r\n\r\n\r\n        <div>\r\n            <SearchBar handleSearch={props.getProducts} /><Link to=\"/cart\"><button>Cart</button></Link>\r\n            <br /><br />\r\n            {props.products.length > 0 && props.products.map(product => {\r\n                const inCart = isInCart(product);\r\n                return <div>\r\n                    <img src={product.mediumImage} />\r\n                    <h3>{product.name}</h3>\r\n                    <p>{\"Sale Price: $\" + product.salePrice}<br />\r\n                        {\"Item Number: \" + product.productId}<br />\r\n                        {\"Description: \" + product.longDescription}\r\n                    </p>\r\n                    {!inCart && <button onClick={() => props.addToCart(product)}>Add to Cart</button>}\r\n                    {inCart && <button onClick={() => props.removeFromCart(product)}>Remove From Cart</button>}\r\n                    <br /><br />\r\n                </div>\r\n            })}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Products;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst ShoppingCart = props => {\r\n    return (<div>\r\n        <Link to=\"/\"><button>Products</button></Link>\r\n        {props.cart.map(product => {\r\n            return (\r\n                <>                \r\n                <h3>{product.name}</h3>\r\n                <p>{product.longDescription}</p>\r\n                <button onClick={() => props.removeFromCart(product)}>Remove From Cart</button>\r\n                <br /><br />\r\n                </>\r\n            )\r\n        } )}\r\n    </div>)\r\n}\r\n\r\nexport default ShoppingCart;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron text-center\">\r\n            <h1> React Best Buy</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport axios from 'axios';\nimport {useMappedState} from 'react-use-mapped-state';\n// useMappedState useful react hook for managed state using a Map as the data structure\nimport './App.css';\nimport Products from './Products';\nimport ShoppingCart from './ShoppingCart';\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport { Container, Row, Col } from \"./components/Grid/index\";\n\n\n// import User from \"../server/models/User\";\n\n// function App() {\n//   return <User />;\n// /?q=${query}}\n\n\nconst App = () => {\n  // const [products, setProducts] = useState([]);\n  // const [cart, setCart] = useState([]);\n  const [{ products, cart }, valueSetter] = useMappedState({ products: [], cart: [] });\n  const getProducts = query => {\n    axios.get(`/api/products?q=${query}`)\n      //  axios.get(`/api/products`, { params: { q: query }})\n      .then(({ data }) => {\n        console.log(data);\n        valueSetter('products', data);\n      })\n      .catch(err => console.log(err));\n  }\n  useEffect(() => {\n    getProducts('television')\n\n  }, []);\n\n  //Add to Cart\n  const addToCart = product => {\n    const newCart = [...cart, product];\n    valueSetter('cart', newCart);\n  }\n  //Remove from Cart\n  const removeFromCart = product => {\n    const newCart = cart.filter(cartItem => cartItem !== product);\n    valueSetter('cart', newCart);\n  }\n\n  console.log('Our Current Cart', cart)\n  return (\n    <Router>\n      <div className=\"App\">\n        <Container>\n\n          <Jumbotron />\n          <Container>\n            <Row>\n              <Col size=\"md-12\">\n              </Col>\n            </Row>\n          </Container>\n\n          <Col size=\"md-12\">\n            <Route\n              exact path=\"/\"\n              component={() =>\n                <Products\n                  getProducts={getProducts}\n                  products={products}\n                  addToCart={addToCart}\n                  cart={cart}\n                  removeFromCart={removeFromCart} />} />\n            <Route exact path=\"/cart\" component={() => <ShoppingCart\n              cart={cart}\n              removeFromCart={removeFromCart}\n            />} />\n\n          </Col>\n        </Container>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}